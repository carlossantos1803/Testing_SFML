//sfml-dev.org

#include <SFML/Graphics.hpp>
#include <iostream>
#include <memory>

/*class AShape
{
	public:
		sf::CircleShape circle;
		sf::RectangleShape rect;
		float speedx, speedy;

};*/


#define RADIO 50

int main(int argc, char* argv[])
{
	//create a new window of sie w*h pixels
	//top-left of the window is (0,0) and bottom-right is (w,h)
	const int mWidth  = 800;
	const int mHeigth = 600;	
	sf::RenderWindow window(sf::VideoMode(mWidth,mHeigth), "SFML works");
	window.setFramerateLimit(60); 
	
	//let's make a shape that we will draw to the screen
	uint8_t radio = 50;
	sf::CircleShape circle(radio);
	circle.setFillColor(sf::Color::Green);
	circle.setPosition(300.0f, 300.0f);
	float circleMoveSpeedX = 1.0f;
	float circleMoveSpeedY = 1.0f;
	
	/*float rx = 300;
	float ry = 200;
	
	sf::Vector2f rSize(rx,ry);
	
	sf::RectangleShape rect(rSize);
	rect.setPosition(100,5);
	rect.setFillColor(sf::Color::Red);
	rect.setOutlineThickness(20);
	
	std::vector<sf::CircleShape> circles;
	std::vector<sf::RectangleShape> rectangles;	
	std::vector<std::shared_ptr<sf::Shape>> shapes;
	
	std::shared_ptr<sf::Shape> circle = std::make_shared<sf::CircleShape>(20);
	std::shared_ptr<sf::Shape> rect2 = std::make_shared<sf::RectangleShape>(sf::Vector2f(40,40));
	rect2->setPosition(400,400);
	
	//shapes.push_back(circle);
	//shapes.push_back(rect);
	
	circles.push_back(circle);
	rectangles.push_back(rect);
	*/
	/*for(uint8_t x = 0; x < 25; x++ )
	{
		for(uint8_t y = 0; y < 15; y++))
		{
			sf::RectangleShape rect(sf::Vector2f(15,15);
			rect.setPosition(x*20,y*20);
			rect.setFillColor(sf::Color(x*10,y*10,0));
			rectangles.push_baack(rect);		
		}
	}*/
	
	sf::Font myFont;
	
	if(!myFont.loadFromFile("../fonts/tech.ttf"))
	{
		std::cerr << "Couldn't load font";
		exit(-1);
	}
	
	//sf::Text text("Sample text", myFont, 24);
	sf::Text name("CGreen", myFont, 18);

	//text.setPosition(0,mHeigth - (float)text.getCharacterSize());
	//name.setFillColor(sf::Color::Red);
	name.setFillColor(sf::Color(255,255,255));
	name.setStyle(sf::Text::Bold);
	
	sf::FloatRect pos = name.getLocalBounds();
	//sf::FloatRect pos = name.getGlobalBounds();
	/*std::cout << "Left: " << pos.left 
			  << " Top: " << pos.top
			  << " Height: " << pos.height
			  << " Width: " << pos.width
			  << std::endl;*/
	
	name.setPosition(300.0f + radio - pos.width/2, 300.0f +radio - pos.height/2);

	std::cout << "mWidth: " << mWidth <<"\n";
	std::cout << "mHeight: " << mHeigth << "\n"; 
	sf::Vector2f circlePos;
	bool bounce = false;
	while(window.isOpen())
	{
		sf::Event event;
		while(window.pollEvent(event))
		{	
			if(event.type == sf::Event::Closed)
			{
				window.close();
			}
			
			if(event.type == sf::Event::KeyPressed)
			{
				std::cout << "Key pressed with code = " << event.key.code << "\n";
			
				if(event.key.code == sf::Keyboard::X)
				{
					circleMoveSpeedX *= -1.0f;
					circleMoveSpeedY *= -1.0f;
				}
			}
		}
		
		std::cout << "circle.getPosition().x : " <<circle.getPosition().x + 2*radio << "\n";
		std::cout << "circle.getPosition().y : " << (int)circle.getPosition().y + 2*radio << "\n";
		
		if(((int)circle.getPosition().x + 2*radio) >= mWidth || (int)circle.getPosition().x <= 0)
		{ 
			circleMoveSpeedX *= -1.0f;	
		}
		else if(((int)circle.getPosition().y + 2*radio) >= mHeigth || (int)circle.getPosition().y <= 0)
		{
			circleMoveSpeedY *= -1.0f;
		}

		circle.setPosition(circle.getPosition().x + circleMoveSpeedX, circle.getPosition().y + circleMoveSpeedY);
		pos = name.getGlobalBounds();
		name.setPosition(circle.getPosition().x + circleMoveSpeedX + radio - pos.width/2, circle.getPosition().y + circleMoveSpeedY + radio - pos.height);
		
		//name.setPosition(circle.getPosition().x + circleMoveSpeed + (radio/2 - pos.width/2), circle.getPosition().y + circleMoveSpeed + (radio+(float)text.getCharacterSize())/2);
		//rect.rotate(0.1);
		
		//window.clear();
		
		/*for(auto& circle : circles)
		{
			window.draw(circle);
		}
		for(auto& rectangle : rectangles)
		{
			window.draw(rectangle);
		}*/
		window.clear();
		window.draw(circle);
		window.draw(name);
		//window.draw(text);
		window.display();
	}	
	
	return 0;
}


